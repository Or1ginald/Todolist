{"version":3,"sources":["api/todolists-api.ts","store/reducers/appReducer.ts","store/reducers/tasksReducer.ts","store/reducers/authReducer.ts","store/reducers/todolistsReducer.ts","store/selectors/getAppState.ts","store/selectors/getToDoLists.ts","store/selectors/getTasks.ts","store/selectors/getAuthState.ts","enums/ResponseCode.ts","constants/baseConstants/index.ts","utils/error-utils.ts","store/middlewares/todolists/setTodosTC.ts","store/middlewares/tasks/updateTaskTC.ts","store/actions/app.ts","store/actions/tasks.ts","store/actions/auth.ts","store/actions/todolist.ts","components/InputPlusButton/InputPlusButton.tsx","components/To-DoList/To-DoList.tsx","store/middlewares/tasks/setTasksTC.ts","store/middlewares/todolists/deleteToDoListTC.ts","store/middlewares/tasks/addTaskTC.ts","store/middlewares/todolists/editToDoListTitleTC.ts","components/ChangeText/ChangeText.tsx","hooks/useAppSelector.ts","components/ErrorSnackBar/ErrorSnackBar.tsx","components/Task/Task.tsx","store/middlewares/tasks/deleteTaskTC.ts","components/To-DoLists/To-DoLists.tsx","store/middlewares/todolists/addToDoListTC.ts","components/Login/Login.tsx","store/middlewares/auth/loginTC.ts","App/App.tsx","store/middlewares/auth/authMeTC.ts","store/middlewares/auth/logOutTC.ts","serviceWorker.ts","store/store.ts","index.tsx","components/InputPlusButton/InputPlusButton.module.css"],"names":["TaskStatuses","AppReducerInitialState","status","errorLog","isInitialized","initialState","authReducerInitState","isLoggedIn","getAppState","state","app","getToDoLists","toDoLists","getTasks","tasks","getAuthState","auth","ResponseCode","key","process","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","put","taskId","model","authAPI","email","password","rememberMe","handleServerAppError","data","dispatch","messages","length","setErrorLogAC","setAppStatusAC","handleServerNetworkError","error","message","setTodosTC","then","res","setTodosAC","catch","updateTaskTC","getState","task","find","el","id","apiModel","deadline","description","priority","startDate","resultCode","Success","updateTaskAC","item","Failed","console","warn","type","setIsInitializedAC","deleteTaskAC","addTaskAC","setTasksAC","setIsLoggedInAC","value","deleteToDoListAC","toDoListId","addToDoListAC","todolistID","editToDoListTitleAC","todos","changeTodolistEntityStatusAC","entityStatus","InputPlusButton","React","memo","props","addCallBack","label","useDispatch","useState","inputValue","setInpVal","setError","onAddItemButtonClick","useCallback","trim","onTextFieldKeyPress","e","onTextInputChange","currentTarget","ErrorSnackBar","Box","sx","display","gap","flexWrap","TextField","variant","onChange","onKeyPress","size","className","s","input","helperText","disabled","Button","onClick","button","ToDoList","useEffect","items","onFilterButtonClick","filter","changeToDoListFilterAC","onDeleteButtonClick","handleAddTaskClick","addTaskTC","editToDoListTitle","editToDoListTitleTC","tasksList","Completed","New","ChangeText","callBack","IconButton","map","Task","ButtonGroup","color","isEditable","setIsEditable","inputVal","setInputVal","onBlur","autoFocus","onDoubleClick","useAppSelector","useSelector","Alert","forwardRef","ref","elevation","onSnackBarClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","width","editTaskTitle","Checkbox","inputProps","fontSize","checked","ToDoLists","handleAddTodolistClick","addToDoListTC","Grid","container","style","padding","spacing","todolist","Paper","to","Login","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","resetForm","justifyContent","FormControl","FormLabel","href","target","rel","handleSubmit","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","finally","AppBar","position","Toolbar","Typography","height","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","copyState","forEach","order","addedDate","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","trace","traceLimit","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.ffa75ab1.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios';\n\nimport { taskType } from 'store';\nimport { Nullable } from 'types';\n\nexport type TodolistType = {\n  id: string;\n  addedDate: string;\n  order: number;\n  title: string;\n};\n\nexport type ResponseType<D = {}> = {\n  resultCode: number;\n  messages: Array<string>;\n  fieldsErrors: Array<string>;\n  data: D;\n};\n\ntype UserParamsType = {\n  id: number;\n  email: string;\n  login: string;\n};\n\ntype GetTasksResponseType = {\n  error: string;\n  totalCount: number;\n  items: Array<taskType>;\n};\n\nexport type UpdateTaskRequestModel = {\n  title: string;\n  description: Nullable<string>;\n  status: TaskStatuses;\n  priority: number;\n  startDate: Nullable<string>;\n  deadline: Nullable<string>;\n};\n\nexport enum TaskStatuses {\n  New = 0,\n  // InProgress = 1,\n  Completed = 2,\n  // Draft = 3\n}\n\nexport type LoginParamsType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n  captcha?: boolean;\n};\n\nconst key: string = process.env.REACT_APP_API_KEY ?? '';\n\nconst instance = axios.create({\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n  withCredentials: true,\n  headers: {\n    'API-KEY': key,\n  },\n});\n\nexport const todolistAPI = {\n  getTodolists() {\n    return instance.get<Array<TodolistType>>('todo-lists');\n  },\n  createTodolist(title: string) {\n    return instance.post<\n      { title: string },\n      AxiosResponse<ResponseType<{ item: TodolistType }>>\n    >('todo-lists', { title });\n  },\n  deleteTodolist(todolistId: string) {\n    return instance.delete<ResponseType>(`todo-lists/${todolistId}`);\n  },\n  updateTodolist(todolistId: string, title: string) {\n    return instance.put<{ title: string }, AxiosResponse<ResponseType>>(\n      `todo-lists/${todolistId}`,\n      { title },\n    );\n  },\n  getTasks(todolistId: string) {\n    return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`);\n  },\n  createTask(todolistId: string, title: string) {\n    return instance.post<\n      { title: string },\n      AxiosResponse<ResponseType<{ item: taskType }>>\n    >(`todo-lists/${todolistId}/tasks`, { title });\n  },\n  deleteTask(todolistId: string, taskId: string) {\n    return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\n  },\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskRequestModel) {\n    return instance.put<\n      UpdateTaskRequestModel,\n      AxiosResponse<ResponseType<{ item: taskType }>>\n    >(`todo-lists/${todolistId}/tasks/${taskId}`, model);\n  },\n};\n\nexport const authAPI = {\n  login(email: string, password: string, rememberMe: boolean) {\n    return instance.post<\n      LoginParamsType,\n      AxiosResponse<ResponseType<{ userId: number }>>\n    >('auth/login', {\n      email,\n      password,\n      rememberMe,\n    });\n  },\n  me() {\n    return instance.get<ResponseType<UserParamsType>>('auth/me');\n  },\n  logOut() {\n    return instance.delete<ResponseType>('auth/login');\n  },\n};\n","import { appReducerInitialStateType } from './types';\n\nimport { appReducerActionType } from 'store';\n\nexport const AppReducerInitialState: appReducerInitialStateType = {\n  status: 'idle',\n  errorLog: null,\n  isInitialized: false,\n};\n\nexport const appReducer = (\n  state: appReducerInitialStateType = AppReducerInitialState,\n  action: appReducerActionType,\n): appReducerInitialStateType => {\n  switch (action.type) {\n    case 'APP/SET_STATUS': {\n      return { ...state, status: action.status };\n    }\n    case 'APP/SET_ERROR_LOG': {\n      return { ...state, errorLog: action.error };\n    }\n    case 'APP/SET_INITIALIZE_STATUS': {\n      return { ...state, isInitialized: action.isInitialized };\n    }\n    default:\n      return state;\n  }\n};\n","// import { TodolistType } from '../../api/todolists-api';\n\nimport { tasksReducerActionType, tasksType } from 'store';\n\nconst initialState: tasksType = {};\n\nexport const tasksReducer = (\n  state: tasksType = initialState,\n  action: tasksReducerActionType,\n): tasksType => {\n  switch (action.type) {\n    case 'TO-DO_LISTS/SET_TODOS': {\n      // action.todos.forEach(el=>{\n      //     return {...store, [el.id]: []}\n      // })\n      const copyState = { ...state };\n      action.todos.forEach(el => {\n        copyState[el.id] = [];\n      });\n      return copyState;\n    }\n    case 'TASKS/DELETE-TASK': {\n      return {\n        ...state,\n        [action.todolistId]: state[action.todolistId].filter(e => e.id !== action.taskId),\n      };\n    }\n    case 'TASKS/UPDATE_TASK': {\n      return {\n        ...state,\n        [action.todolistId]: state[action.todolistId].map(e =>\n          e.id === action.taskId ? { ...e, ...action.task } : e,\n        ),\n      };\n    }\n    case 'TASKS/SET_TASKS': {\n      return { ...state, [action.todolistId]: action.tasks };\n    }\n    case 'TASKS/ADD-TASK': {\n      return {\n        ...state,\n        [action.todolistId]: [action.task, ...state[action.todolistId]],\n      };\n    }\n    case 'TO-DO_LISTS/ADD-TODOLIST': {\n      return { ...state, [action.todolistID]: [] };\n    }\n    case 'TO-DO_LISTS/DELETE-TODOLIST': {\n      const copyState = { ...state };\n      delete copyState[action.toDoListId];\n      return copyState;\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import { authReducerActionType, authReducerInitStateType } from 'store';\n\nexport const authReducerInitState = {\n  isLoggedIn: false,\n};\n\nexport const authReducer = (\n  state: authReducerInitStateType = authReducerInitState,\n  action: authReducerActionType,\n): authReducerInitStateType => {\n  switch (action.type) {\n    case 'login/SET-IS-LOGGED-IN': {\n      return { ...state, isLoggedIn: action.value };\n    }\n\n    default:\n      return state;\n  }\n};\n","import { todDoListsReducerActionType, todDoListsType } from 'store';\n\n/* -------------types----------------*/\n// export type todDoListsType = TodolistType & {\n//   filter: filterType;\n//   entityStatus: requestStatusType;\n// };\n\n/* -------------types----------------*/\n\nconst initialState: todDoListsType = [];\n\nexport const todDoListsReducer = (\n  state: todDoListsType = initialState,\n  action: todDoListsReducerActionType,\n): todDoListsType => {\n  switch (action.type) {\n    case 'TO-DO_LISTS/DELETE-TODOLIST': {\n      return state.filter(el => el.id !== action.toDoListId);\n    }\n    case 'TO-DO_LISTS/ADD-TODOLIST': {\n      return [\n        {\n          id: action.todolistID,\n          title: action.title,\n          filter: 'All',\n          order: 0,\n          addedDate: '',\n          entityStatus: 'idle',\n        },\n        ...state,\n      ];\n    }\n    case 'TO-DO_LISTS/EDIT-TODOLIST-TITLE': {\n      return state.map(el =>\n        el.id === action.toDoListId ? { ...el, title: action.title } : el,\n      );\n    }\n    case 'TO-DO_LISTS/CHANGE-FILTER': {\n      return state.map(el =>\n        el.id === action.toDoListId ? { ...el, filter: action.filter } : el,\n      );\n    }\n    case 'TO-DO_LISTS/SET_TODOS': {\n      return action.todos.map(el => ({\n        ...el,\n        filter: 'All',\n        entityStatus: 'idle',\n      }));\n    }\n    case 'TO-DO_LISTS/CHANGE_TODOLIST_ENTITY_STATUS': {\n      return state.map(el =>\n        el.id === action.toDoListId ? { ...el, entityStatus: action.entityStatus } : el,\n      );\n    }\n    default: {\n      return state;\n    }\n  }\n};\n","import { RootStateType } from '../types';\n\nimport { appReducerInitialStateType } from 'store';\n\nexport const getAppState = (state: RootStateType): appReducerInitialStateType =>\n  state.app;\n","import { RootStateType } from '../types';\n\nimport { todDoListsType } from 'store';\n\nexport const getToDoLists = (state: RootStateType): todDoListsType => state.toDoLists;\n","import { RootStateType } from '../types';\n\nimport { tasksType } from 'store';\n\nexport const getTasks = (state: RootStateType): tasksType => state.tasks;\n","import { RootStateType } from '../types';\n\nimport { authReducerInitStateType } from 'store';\n\nexport const getAuthState = (state: RootStateType): authReducerInitStateType =>\n  state.auth;\n","export enum ResponseCode {\n  Success,\n  Failed,\n}\n","export const ARRAY_ELEMENT_ZERO: number = 0;\nexport const EMPTY_STRING = '';\n","import { Dispatch } from 'redux';\n\nimport { ResponseType } from '../api/todolists-api';\n\nimport { ARRAY_ELEMENT_ZERO } from 'constants/baseConstants';\nimport { setAppStatusAC, setErrorLogAC, setErrorLogACType, setStatusACType } from 'store';\n\n// generic function\nexport const handleServerAppError = <D>(\n  data: ResponseType<D>,\n  dispatch: ErrorUtilsDispatchType,\n): void => {\n  if (data.messages.length) {\n    dispatch(setErrorLogAC(data.messages[ARRAY_ELEMENT_ZERO]));\n  } else {\n    dispatch(setErrorLogAC('Some error occurred'));\n  }\n  dispatch(setAppStatusAC('failed'));\n};\n\nexport const handleServerNetworkError = (\n  error: { message: string },\n  dispatch: ErrorUtilsDispatchType,\n): void => {\n  dispatch(setErrorLogAC(error.message));\n  dispatch(setAppStatusAC('failed'));\n};\n\ntype ErrorUtilsDispatchType = Dispatch<setErrorLogACType | setStatusACType>;\n","import { Dispatch } from 'redux';\n\nimport { todolistAPI } from '../../../api/todolists-api';\n\nimport { setAppStatusAC, setTodosAC } from 'store';\nimport { handleServerNetworkError } from 'utils';\n\nexport const setTodosTC = (dispatch: Dispatch): void => {\n  dispatch(setAppStatusAC('loading'));\n  todolistAPI\n    .getTodolists()\n    .then(res => {\n      dispatch(setTodosAC(res.data));\n      dispatch(setAppStatusAC('succeeded'));\n    })\n    .catch(error => {\n      handleServerNetworkError(error, dispatch);\n    });\n};\n","import { Dispatch } from 'redux';\n\nimport { todolistAPI, UpdateTaskRequestModel } from '../../../api/todolists-api';\n\nimport { ResponseCode } from 'enums';\nimport {\n  setAppStatusAC,\n  updateTaskAC,\n  updateTaskModelType,\n  RootReducerType,\n} from 'store';\nimport { handleServerAppError, handleServerNetworkError } from 'utils';\n\nexport const updateTaskTC =\n  (todolistId: string, taskId: string, model: updateTaskModelType) =>\n  (dispatch: Dispatch, getState: () => RootReducerType) => {\n    dispatch(setAppStatusAC('loading'));\n    const state = getState();\n    const task = state.tasks[todolistId].find(el => el.id === taskId);\n    if (!task) {\n      // throw new Error(\"task not found in the store\");\n      console.warn('task not found in the store');\n      return;\n    }\n    const apiModel: UpdateTaskRequestModel = {\n      title: task.title,\n      deadline: task.deadline,\n      description: task.description,\n      priority: task.priority,\n      startDate: task.startDate,\n      status: task.status,\n      ...model,\n    };\n    todolistAPI\n      .updateTask(todolistId, taskId, apiModel)\n      .then(res => {\n        if (res.data.resultCode === ResponseCode.Success) {\n          dispatch(updateTaskAC(todolistId, taskId, res.data.data.item));\n          dispatch(setAppStatusAC('succeeded'));\n        }\n        if (res.data.resultCode === ResponseCode.Failed) {\n          handleServerAppError(res.data, dispatch);\n        }\n      })\n      .catch(error => {\n        handleServerNetworkError(error, dispatch);\n      });\n  };\n","import { requestStatusType, Nullable } from 'types';\n\nexport const setAppStatusAC = (status: requestStatusType) =>\n  ({\n    type: 'APP/SET_STATUS',\n    status,\n  } as const);\nexport const setErrorLogAC = (error: Nullable<string>) =>\n  ({\n    type: 'APP/SET_ERROR_LOG',\n    error,\n  } as const);\n\nexport const setIsInitializedAC = (isInitialized: boolean) =>\n  ({\n    type: 'APP/SET_INITIALIZE_STATUS',\n    isInitialized,\n  } as const);\n","import { taskType, updateTaskModelType } from 'store';\n\nexport const deleteTaskAC = (todolistId: string, taskId: string) =>\n  ({\n    type: 'TASKS/DELETE-TASK',\n    todolistId,\n    taskId,\n  } as const);\nexport const updateTaskAC = (\n  todolistId: string,\n  taskId: string,\n  task: updateTaskModelType,\n) =>\n  ({\n    type: 'TASKS/UPDATE_TASK',\n    todolistId,\n    taskId,\n    task,\n  } as const);\n\nexport const addTaskAC = (todolistId: string, task: taskType) =>\n  ({\n    type: 'TASKS/ADD-TASK',\n    todolistId,\n    task,\n  } as const);\nexport const setTasksAC = (tasks: Array<taskType>, todolistId: string) =>\n  ({\n    type: 'TASKS/SET_TASKS',\n    tasks,\n    todolistId,\n  } as const);\n","export const setIsLoggedInAC = (value: boolean) =>\n  ({\n    type: 'login/SET-IS-LOGGED-IN',\n    value,\n  } as const);\n","import { TodolistType } from '../../api/todolists-api';\n\nimport { filterType } from 'store';\nimport { requestStatusType } from 'types';\n\nexport const deleteToDoListAC = (toDoListId: string) =>\n  ({\n    type: 'TO-DO_LISTS/DELETE-TODOLIST',\n    toDoListId,\n  } as const);\nexport const addToDoListAC = (title: string, todolistID: string) =>\n  ({\n    type: 'TO-DO_LISTS/ADD-TODOLIST',\n    title,\n    todolistID,\n  } as const);\nexport const editToDoListTitleAC = (toDoListId: string, title: string) =>\n  ({\n    type: 'TO-DO_LISTS/EDIT-TODOLIST-TITLE',\n    title,\n    toDoListId,\n  } as const);\nexport const changeToDoListFilterAC = (toDoListId: string, filter: filterType) =>\n  ({\n    type: 'TO-DO_LISTS/CHANGE-FILTER',\n    toDoListId,\n    filter,\n  } as const);\n\nexport const setTodosAC = (todos: Array<TodolistType>) =>\n  ({\n    type: 'TO-DO_LISTS/SET_TODOS',\n    todos,\n  } as const);\nexport const changeTodolistEntityStatusAC = (\n  toDoListId: string,\n  entityStatus: requestStatusType,\n) =>\n  ({\n    type: 'TO-DO_LISTS/CHANGE_TODOLIST_ENTITY_STATUS',\n    entityStatus,\n    toDoListId,\n  } as const);\n","import React, { ChangeEvent, KeyboardEvent, useCallback, useState } from 'react';\n\nimport AddIcon from '@mui/icons-material/Add';\nimport { TextField } from '@mui/material';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport { useDispatch } from 'react-redux';\n\nimport s from './InputPlusButton.module.css';\n\nimport { ErrorSnackBar } from 'components';\nimport { setErrorLogAC } from 'store';\nimport { Nullable } from 'types';\n\ntype InputPropsType = {\n  addCallBack: (title: string) => void;\n  label: string;\n  // eslint-disable-next-line react/require-default-props\n  disabled?: boolean;\n};\n\nexport const InputPlusButton = React.memo((props: InputPropsType) => {\n  const { addCallBack, label } = props;\n  const dispatch = useDispatch();\n\n  const [inputValue, setInpVal] = useState<string>('');\n  const [error, setError] = useState<Nullable<string>>(null);\n\n  const onAddItemButtonClick = useCallback(() => {\n    if (inputValue.trim()) {\n      setError(null);\n      addCallBack(inputValue);\n      setInpVal('');\n    } else {\n      setError('Incorrect input');\n      dispatch(setErrorLogAC('Input should has at least one symbol except backspace'));\n    }\n  }, [addCallBack, dispatch, inputValue]);\n\n  const onTextFieldKeyPress = useCallback(\n    (e: KeyboardEvent<HTMLDivElement>) => {\n      if (e.key === 'Enter') {\n        onAddItemButtonClick();\n      }\n    },\n    [onAddItemButtonClick],\n  );\n\n  const onTextInputChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setInpVal(e.currentTarget.value);\n  }, []);\n\n  return (\n    <div>\n      <ErrorSnackBar />\n      <Box\n        sx={{\n          display: 'flex',\n          gap: 1,\n          flexWrap: 'nowrap',\n        }}\n      >\n        <TextField\n          id=\"outlined-basic\"\n          label={label}\n          variant=\"outlined\"\n          onChange={onTextInputChange}\n          onKeyPress={onTextFieldKeyPress}\n          error={!!error}\n          value={inputValue}\n          size=\"small\"\n          className={s.input}\n          helperText={error}\n          disabled={props.disabled}\n        />\n\n        <Button\n          variant=\"contained\"\n          onClick={onAddItemButtonClick}\n          className={s.button}\n          disabled={props.disabled}\n        >\n          <AddIcon />\n        </Button>\n      </Box>\n    </div>\n  );\n});\n","import React, { useCallback, useEffect } from 'react';\n\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Button from '@mui/material/Button';\nimport ButtonGroup from '@mui/material/ButtonGroup/ButtonGroup';\nimport IconButton from '@mui/material/IconButton';\nimport { useDispatch } from 'react-redux';\n\nimport { TaskStatuses } from '../../api/todolists-api';\n\nimport { ChangeText, InputPlusButton, Task } from 'components';\nimport {\n  changeToDoListFilterAC,\n  filterType,\n  taskType,\n  addTaskTC,\n  deleteToDoListTC,\n  editToDoListTitleTC,\n  setTasksTC,\n} from 'store';\nimport { requestStatusType } from 'types';\n\ntype ToDoListPropsType = {\n  toDoListId: string;\n  title: string;\n  tasks: taskType[];\n  filter: filterType;\n  entityStatus: requestStatusType;\n};\n\nexport const ToDoList = React.memo((props: ToDoListPropsType) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(setTasksTC(props.toDoListId));\n  }, [dispatch, props.toDoListId]);\n\n  /* -------Functions--------*/\n\n  const onFilterButtonClick = useCallback(\n    (filter: filterType): void => {\n      dispatch(changeToDoListFilterAC(props.toDoListId, filter));\n    },\n    [dispatch, props.toDoListId],\n  );\n\n  const onDeleteButtonClick = useCallback(\n    (toDoListId: string): void => {\n      dispatch(deleteToDoListTC(toDoListId));\n    },\n    [dispatch],\n  );\n\n  const handleAddTaskClick = useCallback(\n    (title: string): void => {\n      dispatch(addTaskTC(props.toDoListId, title));\n    },\n    [dispatch, props.toDoListId],\n  );\n\n  const editToDoListTitle = useCallback(\n    (title: string): void => {\n      dispatch(editToDoListTitleTC(props.toDoListId, title));\n    },\n    [dispatch, props.toDoListId],\n  );\n\n  let tasksList = props.tasks;\n  if (props.filter === 'Completed') {\n    tasksList = props.tasks.filter(e => e.status === TaskStatuses.Completed);\n  }\n  if (props.filter === 'Active') {\n    tasksList = props.tasks.filter(e => e.status === TaskStatuses.New);\n  }\n\n  return (\n    <div>\n      <h3>\n        <ChangeText title={props.title} callBack={editToDoListTitle} />\n        <IconButton\n          aria-label=\"delete\"\n          size=\"large\"\n          onClick={() => onDeleteButtonClick(props.toDoListId)}\n          disabled={props.entityStatus === 'loading'}\n        >\n          <DeleteIcon />\n        </IconButton>\n      </h3>\n      <InputPlusButton\n        addCallBack={handleAddTaskClick}\n        label=\"Add Task\"\n        disabled={props.entityStatus === 'loading'}\n      />\n      <ul>\n        {tasksList.map(task => (\n          <Task\n            key={task.id}\n            id={task.id}\n            status={task.status}\n            title={task.title}\n            toDoListId={props.toDoListId}\n          />\n        ))}\n      </ul>\n      <ButtonGroup color=\"primary\" aria-label=\"medium secondary button group\">\n        <Button onClick={() => onFilterButtonClick('All')}>All</Button>\n        <Button onClick={() => onFilterButtonClick('Active')}>Active</Button>\n        <Button onClick={() => onFilterButtonClick('Completed')}>Completed</Button>\n      </ButtonGroup>\n    </div>\n  );\n});\n","import { Dispatch } from 'redux';\n\nimport { todolistAPI } from '../../../api/todolists-api';\n\nimport { setAppStatusAC, setTasksAC } from 'store';\n\nexport const setTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\n  dispatch(setAppStatusAC('loading'));\n  todolistAPI.getTasks(todolistId).then(res => {\n    dispatch(setTasksAC(res.data.items, todolistId));\n    dispatch(setAppStatusAC('succeeded'));\n  });\n};\n","import { Dispatch } from 'redux';\n\nimport { todolistAPI } from '../../../api/todolists-api';\nimport { ResponseCode } from '../../../enums';\n\nimport { setAppStatusAC, changeTodolistEntityStatusAC, deleteToDoListAC } from 'store';\nimport { handleServerAppError, handleServerNetworkError } from 'utils';\n\nexport const deleteToDoListTC = (todolistId: string) => (dispatch: Dispatch) => {\n  dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'));\n  dispatch(setAppStatusAC('loading'));\n  todolistAPI\n    .deleteTodolist(todolistId)\n    .then(res => {\n      if (res.data.resultCode === ResponseCode.Success) {\n        dispatch(deleteToDoListAC(todolistId));\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'succeeded'));\n        dispatch(setAppStatusAC('succeeded'));\n      }\n      if (res.data.resultCode === ResponseCode.Failed) {\n        handleServerAppError(res.data, dispatch);\n      }\n    })\n    .catch(error => {\n      handleServerNetworkError(error, dispatch);\n    });\n};\n","import { Dispatch } from 'redux';\n\nimport { todolistAPI } from '../../../api/todolists-api';\n\nimport { ResponseCode } from 'enums';\nimport { setAppStatusAC, addTaskAC } from 'store';\nimport { handleServerAppError, handleServerNetworkError } from 'utils';\n\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\n  dispatch(setAppStatusAC('loading'));\n  todolistAPI\n    .createTask(todolistId, title)\n    .then(res => {\n      if (res.data.resultCode === ResponseCode.Success) {\n        dispatch(addTaskAC(todolistId, res.data.data.item));\n        dispatch(setAppStatusAC('succeeded'));\n      }\n      if (res.data.resultCode === ResponseCode.Failed) {\n        handleServerAppError(res.data, dispatch);\n      }\n    })\n    .catch(error => {\n      handleServerNetworkError(error, dispatch);\n    });\n};\n","import { Dispatch } from 'redux';\n\nimport { todolistAPI } from '../../../api/todolists-api';\n\nimport { ResponseCode } from 'enums';\nimport { setAppStatusAC, editToDoListTitleAC } from 'store';\nimport { handleServerAppError, handleServerNetworkError } from 'utils';\n\nexport const editToDoListTitleTC =\n  (toDoListId: string, title: string) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC('loading'));\n    todolistAPI\n      .updateTodolist(toDoListId, title)\n      .then(res => {\n        if (res.data.resultCode === ResponseCode.Success) {\n          dispatch(editToDoListTitleAC(toDoListId, title));\n          dispatch(setAppStatusAC('succeeded'));\n        }\n        if (res.data.resultCode === ResponseCode.Failed) {\n          handleServerAppError(res.data, dispatch);\n        }\n      })\n      .catch(error => {\n        handleServerNetworkError(error, dispatch);\n      });\n  };\n","import React, { ChangeEvent, useState } from 'react';\n/* eslint-disable jsx-a11y/no-autofocus */\n\ntype ChangeTextPropsType = {\n  title: string;\n  callBack: (title: string) => void;\n};\n\nexport const ChangeText = React.memo((props: ChangeTextPropsType) => {\n  const { title, callBack } = props;\n  const [isEditable, setIsEditable] = useState(false);\n  const [inputVal, setInputVal] = useState('');\n  const EnableEditableStatus = (): void => {\n    setIsEditable(true);\n    setInputVal(title);\n  };\n  const DisableEditableStatus = (): void => {\n    setIsEditable(false);\n    callBack(inputVal);\n  };\n  const editTitle = (e: ChangeEvent<HTMLInputElement>): void => {\n    setInputVal(e.currentTarget.value);\n  };\n  return isEditable ? (\n    <input\n      value={inputVal}\n      onChange={editTitle}\n      onBlur={DisableEditableStatus}\n      autoFocus\n    />\n  ) : (\n    <span onDoubleClick={EnableEditableStatus}>{title}</span>\n  );\n});\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\n\nimport { RootStateType } from 'store';\n\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector;\n","import React, { memo } from 'react';\n\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\nimport Snackbar from '@mui/material/Snackbar/Snackbar';\nimport { useDispatch } from 'react-redux';\n\nimport { useAppSelector } from 'hooks';\nimport { setErrorLogAC, getAppState } from 'store';\n\nexport const ErrorSnackBar = memo(() => {\n  const dispatch = useDispatch();\n\n  const app = useAppSelector(getAppState);\n\n  const Alert = React.forwardRef<HTMLDivElement, AlertProps>((props, ref) => (\n    // eslint-disable-next-line react/jsx-props-no-spreading\n    <MuiAlert elevation={3} ref={ref} variant=\"filled\" {...props} />\n  ));\n\n  const onSnackBarClose = (event?: React.SyntheticEvent, reason?: string): void => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    dispatch(setErrorLogAC(null));\n  };\n\n  return (\n    <Snackbar\n      open={app.errorLog !== null}\n      autoHideDuration={12000}\n      onClose={onSnackBarClose}\n    >\n      <Alert onClose={onSnackBarClose} severity=\"error\" sx={{ width: '100%' }}>\n        {app.errorLog}\n      </Alert>\n    </Snackbar>\n  );\n});\n","import React, { ChangeEvent, useCallback } from 'react';\n/* eslint-disable react/jsx-props-no-spreading */\n\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Checkbox from '@mui/material/Checkbox';\nimport IconButton from '@mui/material/IconButton';\nimport { useDispatch } from 'react-redux';\n\nimport { TaskStatuses } from '../../api/todolists-api';\n\nimport { ChangeText } from 'components';\nimport { deleteTaskTC, updateTaskTC } from 'store';\n\ntype TaskPropsType = {\n  toDoListId: string;\n  id: string;\n  status: TaskStatuses;\n  title: string;\n};\n\nexport const Task = React.memo((props: TaskPropsType) => {\n  const { id, title, status } = props;\n\n  const dispatch = useDispatch();\n\n  const changeCheckBoxStatus = (event: ChangeEvent<HTMLInputElement>): void => {\n    const { checked } = event.currentTarget;\n    const model = checked\n      ? { status: TaskStatuses.Completed }\n      : { status: TaskStatuses.New };\n    dispatch(updateTaskTC(props.toDoListId, props.id, model));\n  };\n\n  const editTaskTitle = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    (title: string): void => {\n      dispatch(updateTaskTC(props.toDoListId, props.id, { title }));\n    },\n    [dispatch, props.toDoListId, props.id],\n  );\n\n  const deleteTask = (): void => {\n    dispatch(deleteTaskTC(props.toDoListId, props.id));\n  };\n  const label = { inputProps: { 'aria-label': 'Task Status' } };\n  return (\n    <li key={id}>\n      <Checkbox\n        {...label}\n        sx={{ '& .MuiSvgIcon-root': { fontSize: 28 } }}\n        checked={status === TaskStatuses.Completed}\n        onChange={changeCheckBoxStatus}\n      />\n      <ChangeText title={title} callBack={editTaskTitle} />\n      <IconButton aria-label=\"delete\" size=\"large\" onClick={deleteTask}>\n        <DeleteIcon />\n      </IconButton>\n    </li>\n  );\n});\n","import { Dispatch } from 'redux';\n\nimport { todolistAPI } from '../../../api/todolists-api';\n\nimport { ResponseCode } from 'enums';\nimport { setAppStatusAC, deleteTaskAC } from 'store';\nimport { handleServerAppError, handleServerNetworkError } from 'utils';\n\nexport const deleteTaskTC =\n  (todolistId: string, taskId: string) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC('loading'));\n    todolistAPI\n      .deleteTask(todolistId, taskId)\n      .then(res => {\n        if (res.data.resultCode === ResponseCode.Success) {\n          dispatch(deleteTaskAC(todolistId, taskId));\n          dispatch(setAppStatusAC('succeeded'));\n        }\n        if (res.data.resultCode === ResponseCode.Failed) {\n          handleServerAppError(res.data, dispatch);\n        }\n      })\n      .catch(error => {\n        handleServerNetworkError(error, dispatch);\n      });\n  };\n","import React, { useCallback, useEffect } from 'react';\n\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper/Paper';\nimport { useDispatch } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport { InputPlusButton, ToDoList } from 'components';\nimport { useAppSelector } from 'hooks';\nimport { addToDoListTC, setTodosTC, getAuthState, getTasks, getToDoLists } from 'store';\nimport { ReturnComponentType } from 'types';\n\nexport const ToDoLists = (): ReturnComponentType => {\n  const dispatch = useDispatch();\n\n  const toDoLists = useAppSelector(getToDoLists);\n  const tasks = useAppSelector(getTasks);\n  const { isLoggedIn } = useAppSelector(getAuthState);\n\n  useEffect(() => {\n    if (!isLoggedIn) {\n      return;\n    }\n    dispatch(setTodosTC);\n  }, [dispatch, isLoggedIn]);\n\n  const handleAddTodolistClick = useCallback(\n    (title: string): void => {\n      dispatch(addToDoListTC(title));\n    },\n    [dispatch],\n  );\n\n  if (!isLoggedIn) {\n    return <Navigate to=\"/login\" />;\n  }\n\n  return (\n    <>\n      <Grid container style={{ padding: '20px', width: '100%' }}>\n        <InputPlusButton\n          addCallBack={handleAddTodolistClick}\n          label=\"Add Todolist\"\n          disabled={false}\n        />\n      </Grid>\n      <Grid container spacing={3}>\n        {toDoLists.map(todolist => (\n          <Grid item key={todolist.id}>\n            <Paper style={{ padding: '10px' }}>\n              <ToDoList\n                key={todolist.id}\n                toDoListId={todolist.id}\n                title={todolist.title}\n                filter={todolist.filter}\n                tasks={tasks[todolist.id]}\n                entityStatus={todolist.entityStatus}\n              />\n            </Paper>\n          </Grid>\n        ))}\n      </Grid>\n    </>\n  );\n};\n","import { Dispatch } from 'redux';\n\nimport { todolistAPI } from '../../../api/todolists-api';\n\nimport { ResponseCode } from 'enums';\nimport { setAppStatusAC, addToDoListAC } from 'store';\nimport { handleServerAppError, handleServerNetworkError } from 'utils';\n\nexport const addToDoListTC = (title: string) => (dispatch: Dispatch) => {\n  dispatch(setAppStatusAC('loading'));\n  todolistAPI\n    .createTodolist(title)\n    .then(res => {\n      if (res.data.resultCode === ResponseCode.Success) {\n        dispatch(addToDoListAC(title, res.data.data.item.id));\n        dispatch(setAppStatusAC('succeeded'));\n      }\n      if (res.data.resultCode === ResponseCode.Failed) {\n        handleServerAppError(res.data, dispatch);\n      }\n    })\n    .catch(error => {\n      handleServerNetworkError(error, dispatch);\n    });\n};\n","import React from 'react';\n\nimport Button from '@mui/material/Button';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\nimport { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport { useAppSelector } from 'hooks';\nimport { getAuthState, loginTC } from 'store';\nimport { ReturnComponentType } from 'types';\n\n/* eslint-disable react/jsx-props-no-spreading */\n\ntype FormikErrorType = {\n  email?: string;\n  password?: string;\n  rememberMe?: boolean;\n};\n\nexport const Login = (): ReturnComponentType => {\n  const dispatch = useDispatch();\n\n  const { isLoggedIn } = useAppSelector(getAuthState);\n\n  const twoSymbols: number = 2;\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      rememberMe: false,\n    },\n    validate: values => {\n      const errors: FormikErrorType = {};\n      if (!values.email) {\n        errors.email = 'Required';\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = 'Invalid email address';\n      }\n      if (!values.password) {\n        errors.password = 'Password Required';\n      } else if (values.password.length < twoSymbols) {\n        errors.password = 'Password should contain >2 symbols';\n      }\n      return errors;\n    },\n    onSubmit: values => {\n      dispatch(loginTC(values));\n      formik.resetForm();\n    },\n  });\n\n  if (isLoggedIn) {\n    return <Navigate to=\"/\" />;\n  }\n\n  return (\n    <Grid container justifyContent=\"center\">\n      <Grid item justifyContent=\"center\">\n        <FormControl>\n          <FormLabel>\n            <p>\n              To log in get registered\n              <a\n                href=\"https://social-network.samuraijs.com/\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                {' '}\n                here\n              </a>\n            </p>\n            <p>or use common test account credentials:</p>\n            <p>Email: free@samuraijs.com</p>\n            <p>Password: free</p>\n          </FormLabel>\n          <form onSubmit={formik.handleSubmit}>\n            <FormGroup>\n              <TextField\n                label=\"Email\"\n                margin=\"normal\"\n                {...formik.getFieldProps('email')}\n              />\n              {formik.touched.email && formik.errors.email && (\n                <div style={{ color: 'red' }}>{formik.errors.email}</div>\n              )}\n              <TextField\n                type=\"password\"\n                label=\"Password\"\n                margin=\"normal\"\n                {...formik.getFieldProps('password')}\n              />\n              {formik.touched.password && formik.errors.password && (\n                <div style={{ color: 'red' }}>{formik.errors.password}</div>\n              )}\n              <FormControlLabel\n                label=\"Remember me\"\n                control={<Checkbox />}\n                {...formik.getFieldProps('rememberMe')}\n                checked={formik.values.rememberMe}\n              />\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                Login\n              </Button>\n            </FormGroup>\n          </form>\n        </FormControl>\n      </Grid>\n    </Grid>\n  );\n};\n","import { Dispatch } from 'redux';\n\nimport { authAPI, LoginParamsType } from '../../../api/todolists-api';\n\nimport { ResponseCode } from 'enums';\nimport { setAppStatusAC, setIsLoggedInAC } from 'store';\nimport { handleServerAppError, handleServerNetworkError } from 'utils';\n\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\n  dispatch(setAppStatusAC('loading'));\n  authAPI\n    .login(data.email, data.password, data.rememberMe)\n    .then(res => {\n      if (res.data.resultCode === ResponseCode.Success) {\n        dispatch(setIsLoggedInAC(true));\n        dispatch(setAppStatusAC('succeeded'));\n      }\n      if (res.data.resultCode === ResponseCode.Failed) {\n        handleServerAppError(res.data, dispatch);\n      }\n    })\n    .catch(error => {\n      handleServerNetworkError(error, dispatch);\n    });\n};\n","import React, { useEffect } from 'react';\n\nimport './App.css';\nimport { AppBar, Toolbar, Typography } from '@mui/material';\nimport Box from '@mui/material/Box/Box';\nimport Button from '@mui/material/Button';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Container from '@mui/material/Container/Container';\nimport LinearProgress from '@mui/material/LinearProgress/LinearProgress';\nimport { useDispatch } from 'react-redux';\nimport { Navigate, Route, Routes } from 'react-router-dom';\n\nimport { Login, ToDoLists, ErrorSnackBar } from 'components';\nimport { useAppSelector } from 'hooks';\nimport { authMeTC, getAppState, logOutTC } from 'store';\n\nexport const App = React.memo(() => {\n  const dispatch = useDispatch();\n\n  const app = useAppSelector(getAppState);\n  // const isLoggedIn = useSelector<rootReducerType, boolean>(store => store.auth.isLoggedIn)\n\n  useEffect(() => {\n    dispatch(authMeTC());\n  }, [dispatch]);\n\n  if (!app.isInitialized) {\n    return (\n      <div style={{ position: 'fixed', top: '30%', textAlign: 'center', width: '100%' }}>\n        <CircularProgress />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className=\"title\">\n            That is a list for a things to do\n          </Typography>\n          <Button color=\"inherit\" onClick={() => dispatch(logOutTC())}>\n            Log out\n          </Button>\n        </Toolbar>\n      </AppBar>\n\n      <Box height={5}>{app.status === 'loading' && <LinearProgress />}</Box>\n      <ErrorSnackBar />\n\n      <Container fixed>\n        <Routes>\n          <Route path=\"/\" element={<ToDoLists />} />\n          <Route path=\"/login\" element={<Login />} />\n          <Route path=\"/404\" element={<h1>404</h1>} />\n          <Route path=\"*\" element={<Navigate to=\"/404\" />} />\n        </Routes>\n        {/* <ToDoLists/> */}\n        {/* <Login/> */}\n      </Container>\n    </div>\n  );\n});\n","import { Dispatch } from 'redux';\n\nimport { authAPI } from '../../../api/todolists-api';\n\nimport { ResponseCode } from 'enums';\nimport { setAppStatusAC, setIsInitializedAC, setIsLoggedInAC } from 'store';\nimport { handleServerAppError, handleServerNetworkError } from 'utils';\n\nexport const authMeTC = () => (dispatch: Dispatch) => {\n  dispatch(setAppStatusAC('loading'));\n  authAPI\n    .me()\n    .then(res => {\n      if (res.data.resultCode === ResponseCode.Success) {\n        dispatch(setIsLoggedInAC(true));\n        dispatch(setAppStatusAC('succeeded'));\n      }\n      if (res.data.resultCode === ResponseCode.Failed) {\n        dispatch(setIsLoggedInAC(false));\n        handleServerAppError(res.data, dispatch);\n      }\n    })\n    .catch(error => {\n      handleServerNetworkError(error, dispatch);\n    })\n    .finally(() => {\n      dispatch(setIsInitializedAC(true));\n    });\n};\n","import { Dispatch } from 'redux';\n\nimport { authAPI } from '../../../api/todolists-api';\n\nimport { ResponseCode } from 'enums';\nimport { setAppStatusAC, setIsLoggedInAC, setTodosAC } from 'store';\nimport { handleServerAppError, handleServerNetworkError } from 'utils';\n\nexport const logOutTC = () => (dispatch: Dispatch) => {\n  dispatch(setAppStatusAC('loading'));\n  authAPI\n    .logOut()\n    .then(res => {\n      if (res.data.resultCode === ResponseCode.Success) {\n        dispatch(setIsLoggedInAC(false));\n        dispatch(setTodosAC([]));\n        dispatch(setAppStatusAC('succeeded'));\n      }\n      if (res.data.resultCode === ResponseCode.Failed) {\n        handleServerAppError(res.data, dispatch);\n      }\n    })\n    .catch(error => {\n      handleServerNetworkError(error, dispatch);\n    });\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport { appReducer, authReducer, tasksReducer, todDoListsReducer } from 'store';\n\nexport const rootReducer = combineReducers({\n  tasks: tasksReducer,\n  toDoLists: todDoListsReducer,\n  app: appReducer,\n  auth: authReducer,\n});\n\n// export const store = createStore(rootReduce<r, applyMiddleware(thunk));\n\nconst composeEnhancers =\n  // @ts-ignore\n  (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\n    // @ts-ignore\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({ trace: true, traceLimit: 25 })) ||\n  compose;\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { App } from './App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"InputPlusButton_button__3Lqqr\"};"],"sourceRoot":""}